type JJPProduct
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String
  price: Float
  orders: [JJPOrderProduct] @connection(keyName: "byproduct", fields: ["id"])
}

type JJPOrder
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }]) {
  id: ID!
  code: String
  payable: Float
  address: String
  products: [JJPOrderProduct] @connection(keyName: "byorder", fields: ["id"])
}

type JJPOrderProduct
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }])
  @key(name: "byorder", fields: ["orderid", "productid"])
  @key(name: "byproduct", fields: ["productid", "orderid"]) {
  id: ID!
  orderid: ID!
  productid: ID!
  amount: Int
  product: JJPProduct @connection(fields: ["productid"])
  order: JJPOrder @connection(fields: ["orderid"])
}

type JJPTest @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  note: String
}

input JJPPO {
  cart: [CartItem]
  token: String
  address: String
}

input CartItem {
  id: ID
  amount: Int
}

type Mutation {
  jjpprocessorder(input: JJPPO!): String
    @function(name: "jjpstripepay-${env}")
    @function(name: "jjpcreateorder-${env}")
}
